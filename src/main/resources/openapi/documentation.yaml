openapi: "3.0.3"
info:
  title: "study ktor 2.2.4 API"
  description: "study ktor 2.2.4 API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
paths:
  /metrics-micrometer:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /:
    get:
      description: "Sample of StatusPages plugin"
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /articles:
    get:
      description: "Sample of Resources plugin"
      parameters:
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK <br> Get all articles ..."
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /json/kotlinx-serialization:
    get:
      description: "Sample of ContentNegotiation plugin"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map"
  /users:
    post:
      description: "Create user"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
  /users/{id}:
    delete:
      description: "Delete user"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: "Read user"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: "Update user"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
components:
  schemas:
    Map:
      type: "object"
      properties: { }
    User:
      type: "object"
      properties:
        name:
          type: "string"
        age:
          type: "integer"
          format: "int32"
